package cursoJava.variables;

public class ManualVariables {
	
	/**
	 * ****************************************************************************************************************************
	 * VARIABLES :
	 * 
	 * UNA VARIABLE ES UN ESPACIO EN LA MEMORIA DEL MORDENADOR QUE OCUPA UN VALOR, UNA VARIABLE EN JAVA PUEDE CAMBIAR DE VALOR 
	 * MEDIANTE LA EJECUCION DE UN PROGRAMA, CABE DESTACAR QUE LAS VARIABLES EN JAVA SE DEBEN INICIALIZAR ANTES DE SER UTILIZADAS
	 * TAMBIEN UNA VARIABLE EN JAVA DEBE TERMINAR EN PUNTO Y COMA, EJEMPLO :
	 * 
	 * int edad = 34;
	 * 
	 * NOTA : UNA VARIABLE EN JAVA TIENES TRES CARACTERISTICAS, "EL TIPO DE DATOS", "EL NOMBRE DE LA VARIABLE", "Y EL VALOR".
	 * ****************************************************************************************************************************
	 * TIPOS DE VARIABLES  : 
	 * 
	 * HAY TRES TIPOS DE VARIABLES EN JAVA
	 *  - VARIABLES LOCALES.
	 *  - VARIABLES DE INSTACIA.
	 *  - VARIABLES STATICIAS.
	 * ****************************************************************************************************************************
	 *  VARIABLES LOCALES : UNA VARIABLE DEFINIDA DENTRO DE UN BLOQUE, FUNCION, METODO O CONSTRUCTOR SE LLAMA VARIABLE LOCAL.
	 *  ESTAS VARIABLES SE CREAN CUANDO EL BLOQUE INGRESADO O METODO SE LLAMA Y DESTRUYE DESPUES DE SALIR DEL BLOQUE O CUANDO LA
	 *  LLAMADA INGRESA DEL METODO, EL ALCANCE DE ESTAS VARIABLES SOLO EXISTE DENTRO DEL BLOQUE EN EL QUE SE DECLARA LA VARIABLE
	 *  ES DECIR PODEMOS ACCEDER A ESTAS VARIABLES SOLO DENTRO DE ESE BLOQUE O METODO EJEMPLO :
	 *  
	 *  public class Ejemplo {
	 *  
	 *  public static void main(String [] args){
	 *  	int edad = 34;  // VARIABLE LOCAL DENTRO DEL METODO PRINCIPAL DE JAVA.
	 *     }
	 *  
	 *   }
	 * ****************************************************************************************************************************  
	 *  VARIABLE DE INSTANCIA : LAS VARIABLES DE INSTANCIA SON VARIABLES NO STATICAS Y SE DECLARAN EN UNA CLASE, ESTAS VARIABLES
	 *  SE DECLARAN FUERA DE CUALQUIER METODO, BLOQUE, CONSTRUCTOR  O FUNCION, COMO LAS VARIABLES DE INSTANCIA SE DECLARAN EN UNA
	 *  CLASE, ESTAS VARIABLES SE CREAN CUANDO UN OBJETO DE LA CLASE SE CREA Y SE DESTRUTE CUANDO SE DESTRUYE EL OBJETO A
	 *  DIFERENCIA DE LAS VARIABLES LOCALES, PODEMOS USAR ESPECIFICADORES DE ACCESO PARA VAROABLES DE INSTACIA, EJEMPLO :
	 *  
	 *  public class Ejemplo {
	 *  // VARIABLES DE INSTANCIA O PROPIEDADES DE LA CLASE.
	 *  public edad = 34;
	 *  
	 *  public static void main(String [] args){
	 *  	
	 *     }
	 *  
	 *  }
	 *  
	 *  NOTA : SI NO ESPECIFICAMOS NINGUN ESPECIFICADOR DE ACCESO, SE UTILIZARA EL ESPECIFICADOR PREDETERMINADO.
	 *  
	 * **************************************************************************************************************************** 
	 *  VARIABLES ESTATICIAS : LAS VARIABLES ESTATICAS TAMBIEN SE CONOCEN COMO VARIABLES DE CLAE, O PROPIEDAD DE UNA CLASE
	 *  ESTAS VARIABLES SE DECLARAN DE FORMA SIMILAR A LAS VARIABLES DE INSTANCIA LA DIFERENCIA ES QUE LAS VARIABLES ESTATICAS
	 *  SE DECLARAN UTILIZANDO LA PALABRA RESERVADA "static" DENTRO DE UNA CLASE FUERA DE CUALQUIER CONSTRUCTOR O BLOQUE DE 
	 *  METODOS, A DIFERENCIA DE LAS VARIABLES DE INSTANCIA, SOLO PODEMOS TENER UNA COPIA DE UNA VARIABLE ESTATICA POR CLASE,
	 *  INDEPENDIENTEMENTE DE CUANTOS OBJETOS CREEMEOS, LAS VARIABLES ESTATICAS SE CREAN AL INICIO DE LA EJECUCION DEL PROGRAMA
	 *  Y SE DESTRUYEN AUTOMATICAMENTE CUANDO FINALIZA LA EJECUCION.
	 *  
	 *  NOTA : PARA ACCEDER A VARIABLES ESTATICAS NO NECESITAMOS CREAR NINGUN OBJETO DE ESA CLASE, SIMPLEMENTE PODEMOS ACCEDER
	 *  COLOCANDO EL NOMBRE DE LA CLASE, SEGUIDO DEL NOMBRE O METODO STATICO EJEMPLO :
	 *  
	 *    public class Ejemplo {
	 *    // VARIABLES STATICA.
	 *    public static String name = "Freddy";
	 *  
	 *     public static void main(String [] args){
	 *      	System.out.println(Ejemplo.name); // ESTO IMPRIME POR CONSOLA "Freddy"
	 *  	
	 *      }
	 *  
	 *   }
	 * ****************************************************************************************************************************   
	 */

}
